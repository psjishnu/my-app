{"version":3,"sources":["Comp1.js","config/Fire.js","Login.js","serviceWorker.js","index.js"],"names":["Comp1","props","attack","move","sa","name","cv2","setState","id2","state","this","style","backgroundColor","height","width","backgroundImage","backgroundSize","textAlign","position","className","color","type","align","onClick","username","margin","padding","borderRadius","src","Component","Fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","readTextFile","file","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","d1","lines","i","allText","responseText","split","length","slice","password","ok","fundData","send","ctv12","sampleText","login","bind","handleChange","email","e","target","value","preventDefault","fire","auth","signInWithEmailAndPassword","then","u","catch","error","console","log","t1","fontSize","ip1","window","history","back","alert","method","onChange","logged","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ae03a448.chunk.js","sourcesContent":["import React , { Component, useReducer } from 'react';\r\nimport Login from './Login';\r\nclass Comp1 extends Component{\r\n    attack = (move) => {\r\n        this.props.sa(this.props.name, move);\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {id2: '0'};\r\n      };\r\n    cv2 = () => {\r\n \r\n        this.setState({id2: '1'});\r\n      }\r\n\r\n    render(){\r\n        const body1={\r\n            backgroundColor:\"black\",\r\n            height:\"100%\",\r\n            width:\"100%\",\r\n            backgroundImage: \"url(./img.png)\",\r\n            backgroundSize: \"100% 100%\",\r\n            textAlign:\"center\",\r\n            position:\"fixed\"\r\n        }\r\n        const a1 ={\r\n            color:\"white\",\r\n        }\r\n        const but1 ={\r\n            height:\"25px\",\r\n            width:\"70px\",\r\n            color:\"black\",\r\n            backgroundColor:\"grey\",\r\n            align:\"right\"\r\n          }\r\n          const s1={\r\n            margin:\"auto\",\r\n            height:\"210px\",\r\n            width:\"200px\",\r\n            padding:\"10px 50px 10px 70px\",\r\n            borderRadius:\"20px\",\r\n            textAlign:\"center\", \r\n            align : \"center\" \r\n         }\r\n        if(this.state.id2=='1')\r\n        {\r\n            return(\r\n                <div>\r\n                     <Login/>\r\n                     \r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div style={body1} className=\"app-content\">\r\n                <h1 style={a1}>Successfully Logged in</h1>\r\n                <button type=\"button\" style={but1} onClick={this.cv2}>logout</button>\r\n                <h1>{this.state.username}</h1>\r\n                <div style={s1}>\r\n                <img src=\"img.gif\"></img>\r\n                </div>\r\n                <br/>\r\n                <br/><br/><br/><br/><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Comp1;","import firebase from 'firebase'\r\nconst config = {\r\n    apiKey: \"AIzaSyCiUa7wLEqWuhD1IjAsM1FTYPG5PujtVEo\",\r\n    authDomain: \"kluupm.firebaseapp.com\",\r\n    databaseURL: \"https://kluupm.firebaseio.com\",\r\n    projectId: \"kluupm\",\r\n    storageBucket: \"kluupm.appspot.com\",\r\n    messagingSenderId: \"374488001094\",\r\n    appId: \"1:374488001094:web:0373e24595cb73242d3847\",\r\n    measurementId: \"G-ND6CLC1G7D\"\r\n  };\r\n  const Fire =  firebase.initializeApp(config);\r\n  export default Fire;","import React , { Component} from 'react';\nimport Comp1 from './Comp1';\nimport fire from './config/Fire';\n\nclass Login extends Component {\n  \n\n  \n  constructor(props){\n      super(props);\n      this.state = {sampleText: '0'};\n      this.state = {ok: '0'};\n      this.state = { username: 'WELCOME' };\n      this.login = this.login.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {\n        email: '',\n        password: ''\n    };\n  \n  }\nreadTextFile = file => {\n  var rawFile = new XMLHttpRequest();\n  rawFile.open(\"GET\", file, false);\n  rawFile.onreadystatechange = () => {\n      if (rawFile.readyState === 4) {\n          if (rawFile.status === 200 || rawFile.status == 0) {\n              var d1,lines,length,i, allText = rawFile.responseText;\n              lines = allText.split(\" \"); \n              for(i = 0; i < lines.length; i++){ \n                 d1=lines.slice(\" \");\n                  if(d1[i]==this.state.username && d1[i+1]==this.state.password)\n                    this.state.ok='1';         \n              \n              }\n              this.setState({\n                  fundData: allText\n              });\n          }\n      }\n  };\n  rawFile.send(null);\n};\n\n\n\nctv12 = () => {\n  this.readTextFile(\"data.txt\");\n  this.setState({sampleText: '1'});\n}\nhandleChange(e) {\n  this.setState({ [e.target.name]: e.target.value });\n}\n\n    login(e) {\n      e.preventDefault();\n      fire.auth().signInWithEmailAndPassword(this.state.username, this.state.password).then((u)=>{\n      }).catch((error) => {\n          console.log(error);\n        });\n        \n    } \n  render(){\n    var k=0;\n    const body1={\n        backgroundColor:\"red\",\n        height:\"100%\",\n        width:\"100%\",\n        backgroundImage: \"url(./img.gif)\",\n        backgroundSize: \"100% 100%\",\n        textAlign:\"center\",\n        position:\"fixed\"\n    }\n     const t1={\n        color:\"white\",\n        textAlign:\"center\",\n        fontSize:\"25px\"\n    }\n    const wel={\n        color:\"white\",\n        textAlign:\"center\",\n        fontSize:\"50px\"\n    }\n    const s1={\n        margin:\"auto\",\n        height:\"210px\",\n        width:\"200px\",\n        padding:\"10px 70px 10px 70px\",\n        borderRadius:\"20px\",\n        textAlign:\"center\",  \n     }\n     const ip1={\n         width:\"200px\",\n         height:\"35px\"\n     }\n     const but1 ={\n       height:\"25px\",\n       width:\"70px\",\n       color:\"black\",\n       backgroundColor:\"grey\"\n     }\n     /*if(this.state.ok=='1')\n     alert(\"ahaa \"+this.state.ok);\n*/\n     if(this.state.sampleText=='1' && this.state.ok=='1' )\n     return(\n       <Comp1/>\n     )\n     else if(this.state.sampleText=='1')\n      {\n        window.history.back();\n        this.state.sampleText='0';\n       alert(\"invalid credentials\");\n    \n     }\n        return (\n            \n            <div style={body1} className=\"app-content\">\n            <h1 style={wel}>WELCOME TO LOGIN PAGE</h1>\n            <br/><br/><br/><br/><br/><br/>\n            <br/><br/><br/>\n            <form method=\"post\">\n            <div style={s1}>\n            <label style={t1}>\n                Name:\n                <input style={ip1} type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\n            </label>\n            <br/><br/>\n            <label style={t1}>\n                password:\n                <input style={ip1} type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />            </label>\n            <br/><br/>\n            <button style={but1} onClick={this.ctv12} value={this.state.logged} name=\"logged\"><b>LOGIN</b></button>\n            \n            </div>\n            </form>\n           \n            </div>\n        )\n        }\n    }\n\n\n\nexport default Login;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}